{"./":{"url":"./","title":"Introduction","keywords":"","body":"数据科学, 学习手册 记录数据科学学习时的资料，好记性不如烂笔头，及时归纳总结，也方便查询。 数据科学的主要语言为 R 和 Python，一直非常喜欢 Python，但没有系统性的学习，将来补上这方面知识，而为了目前的科研数据分析，先学习 R 语言。 目前正在学习的知识包括： R 语言 [ ] R Programming [x] Lesson 1 [x] Lesson 2 [ ] Lesson 3 [ ] Lesson 4 [ ] Lesson 5 [ ] Lesson 6 [ ] Lesson 7 [ ] Lesson 8 [ ] Lesson 9 [ ] Lesson 10 [ ] Lesson 11 [ ] Lesson 12 [ ] Lesson 13 [ ] Lesson 14 [ ] Lesson 15 Python 语言 Copyright © xresearcher.com 2020 all right reserved，powered by Gitbook该文件修订时间： 2020-03-10 16:57:49 "},"R/RProgramming/":{"url":"R/RProgramming/","title":"R Programming","keywords":"","body":"使用 swirl 学习 R 语言 启动 R R 安装 swirl > install.packages(\"swirl\") 调用、安装课程并启动 swirl > library(\"swirl\") > install_course(\"Course Name Here\") # 课程列表参考 https://github.com/swirldev/swirl_courses > swirl() 后面就是按照提醒一步步操作，先给自己起个名字，然后选择课程。我选择的是 R Programming，最后选择课时。 swirl 的其他命令 可输入 info() 查看 > info() | When you are at the R prompt (>): | -- Typing skip() allows you to skip the current question. | -- Typing play() lets you experiment with R on your own; swirl will ignore | what you do... | -- UNTIL you type nxt() which will regain swirl's attention. | -- Typing bye() causes swirl to exit. Your progress will be saved. | -- Typing main() returns you to swirl's main menu. | -- Typing info() displays these options again. Copyright © xresearcher.com 2020 all right reserved，powered by Gitbook该文件修订时间： 2020-03-10 16:57:49 "},"R/RProgramming/lesson1.html":{"url":"R/RProgramming/lesson1.html","title":"基本构件","keywords":"","body":"Lesson 1 基本构件 本课时，我们将探索一些 R 语言的基本构件。 如需帮助，可以使用 help.start()。 最简单的形式，R 语言可用作交互式计算器： > 5 + 7 [1] 12 我们可以创建一个变量来储存计算结果，而不用每次都重新输入 5 + 7 ，在 R 语言中，给变量赋值使用的符号是 （小于号后面跟一个减号）。 可以把这个分配运算符看作一个箭头，把箭头右侧的值赋给左侧的变量，例如： > x 你可能注意到了，R 并没有直接输出计算结果 12，当你使用分配运算符时，R 假设你不想立即看到计算结果，而是倾向于之后要使用此计算值。如果想查看变量 x 的内容，直接输入 x，然后按 Enter， > x [1] 12 下面创建一个新变量 y ，使 y = x - 3 > y y [1] 9 使用 y 或 y ，完全取决与你的个人习惯，但是在每个分配运算符两侧各留一个 空格 是个很好的习惯。 现在，让我们创建一个称为 向量 的小的数字集合。 在 R 语言中，任何包含数据的东西都称为一个数据结构，而数值向量是最简单的数据结构类型。 最简单的创建一个向量的方式是使用 c() 函数, 它代表的意思是 concatenate 或 combine。下面创建一个包含数字 1.1，9 和 3.14 的向量 z： > z z [1] 1.10 9.00 3.14 如果对某个特定函数存在疑问，可以使用 \"?\" 命令访问 R 自带的帮助文件，例如，如果想得到 c() 函数更多的信息，可以输入 ?c 查看（不用输入括号）。 > ?c c package:base R Documentation Combine Values into a Vector or List Description: This is a generic function which combines its arguments. The default method combines its arguments to form a vector. All arguments are coerced to a common type which is the type of the returned value, and all attributes except names are removed. Usage: ... 下面我们创建一个包含 z 和 555 的新向量。 > c(z, 555) [1] 1.10 9.00 3.14 555.00 再创建一个向量 c(z, 555, z) > c(z, 555, z) [1] 1.10 9.00 3.14 555.00 1.10 9.00 3.14 数值向量能被用于算术运算。例如： > z * 2 + 100 [1] 102.20 118.00 106.28 首先是每个元素乘以 2，然后每个元素的计算结果再加上 100. 其他常见的数学运算符有 \"+\", \"-\", \"/\", 和 \"^\"(squared 平方)。使用函数 sqrt() 得到平方根，以及使用 abs() 函数得到绝对值。 创建一个新函数 my_sqrt, 求 z-1 的平方根： > my_sqrt my_sqrt [1] 0.3162278 2.8284271 1.4628739 R 首先会将向量 z 的每个元素减去 1，然后是每个结果独立开平方根，得到的是和向量 z 长度一样的新的向量。 创建一个新的向量 my_div，使其等于 向量 z 除于 my_sqrt: > my_div my_div [1] 3.478505 3.181981 2.146460 在之前的例子中，当我们计算 z * 2 + 100 时，z 是一个长度为 3 的向量，但是技术上说， 2 和 100 是长度为 1 的向量。其背后的含义是，R 再循环 制造了一个向量 2s 和一个向量 100s，换句话说，当你要求 R 计算 z 2 + 100 时，它真实计算的是：z c(2, 2, 2) + c(100, 100, 100). 为了了解 在循环 机制时如何运作的，我们看另一个例子，试着做一个运算，c(1, 2, 3, 4) + c(0, 10) > c(1, 2, 3, 4) + c(0, 10) [1] 1 12 3 14 如果长向量的长度 不是 短向量的倍数，R 仍会应用 在循环 机制，但是会弹出一个警告，让你知道有些怪怪的事情正在运行。例如，我们尝试运行 c(1, 2, 3, 4) + c(0, 10, 100) > c(1, 2, 3, 4) + c(0, 10, 100) [1] 1 12 103 4 Warning message: In c(1, 2, 3, 4) + c(0, 10, 100) : longer object length is not a multiple of shorter object length Copyright © xresearcher.com 2020 all right reserved，powered by Gitbook该文件修订时间： 2020-03-10 16:57:49 "},"R/RProgramming/lesson2.html":{"url":"R/RProgramming/lesson2.html","title":"工作空间和文件","keywords":"","body":"Lesson 2 工作空间和文件 在本节课，你将能学到，在 R 语言中如何检查你的当地工作空间，以及开始探索工作空间与机器的文件系统之间的关系。 因为不同操作系统在处理事情比如文件路径等有不同的规定，这些命令的输出结果也可能因机器而异。不管怎么说，重要的是，R 语言为与文件交互提供了一个通用 API. getwd() 获取本 R 课程当前运行的目录： > getwd() [1] \"/root\" ls() 列出您当前工作空间的所有项目： > ls() [1] \"my\" \"my_div\" \"my_sqrt\" \"mydiv\" \"x\" \"y\" \"z\" 对 x 赋值 9 > x ls() [1] \"my\" \"my_div\" \"my_sqrt\" \"mydiv\" \"x\" \"y\" \"z\" list.files() 或 dir() 列出在本工作目录下的所有文件： > list.files() [1] \"1\" \"anaconda3\" [3] \"gitback.sh\" \"gitback.sh.save\" [5] \"install.sh\" \"JupyterLab\" 使用 ?list.files 查看更多信息 args() 查看函数可以采用什么样的参数。 例如，查看 list.files() 函数可以使用什么参数： > args(list.files) function (path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE) NULL 将当前工作目录赋值给变量 old.dir: > old.dir 我们可以在课程结束时用此变量返回到我们开始的地方。许多像 getwd() 这样的询问函数有个非常有用特性，可以返回问题的答案为一个函数的结果。 dir.create() 在当前工作目录下创建一个名为 testdir 的目录。 > dir.create(\"testdir\") setwd() 设置当前目录为 testdir > setwd(\"testdir\") 通常，你想设置你的工作目录为某些敏感的地方，也许需要创建你正在运行的特有项目。事实上，组织你的 R 包方面的工作，使用 RStudio 是个明智的选择。下载 Rstudio 在 http://www.rstudio.com/ file 系类函数 file.create() 在当前工作目录下创建一个名为 mytest.R 的文件： > file.create('mytest.R') [1] TRUE # 这个文件就时该工作目录下的唯一的文件，查看一下： > list.files() [1] \"mytest.R\" file.exists() 检查当前工作目录下是否存在 mytest.R 文件： > file.exists(\"mytest.R\") [1] TRUE file.info() 查看文件 mytest.R 的信息： > file.info(\"mytest.R\") size isdir mode mtime ctime mytest.R 0 FALSE 644 2020-03-09 22:49:36 2020-03-09 22:49:36 atime uid gid uname grname mytest.R 2020-03-09 22:49:36 0 0 root root 可以使用 $ 运算符，比如 file.info('mytest.R')$mode --- 获得特定的项目 file.rename() 重命名 mytest.R 为 mytest2.R > file.rename('mytest.R','mytest2.R') [1] TRUE file.copy() 备份 mytest2.R 为 mytest3.R: > file.copy('mytest2.R','mytest3.R') [1] TRUE file.remove() 移除文件 file.path() 提供某文件的相对路径： > file.path('mytest3.R') [1] \"mytest3.R\" Copyright © xresearcher.com 2020 all right reserved，powered by Gitbook该文件修订时间： 2020-03-10 16:57:49 "}}